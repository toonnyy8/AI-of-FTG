{"version":3,"sources":["../src/js/MirageNet/dddqn/model.js","../src/js/MirageNet/dddqn/index.js","js/agent.js"],"names":["tfex","tf","DDDQN","sequenceLen","stateVectorLen","embInner","layerNum","outputInner","actionNum","memorySize","updateTargetStep","minLearningRate","count","model","buildModel","summary","targetModel","setWeights","getWeights","memory","optimizer","train","adam","stateSeqNet","inputLayer","stateSeqLayer","layers","conv1d","filters","kernelSize","activation","padding","apply","batchNormalization","permute","dims","input","shape","i","value","globalAveragePooling1d","reshape","targetShape","flatten","A","advantage","lambda","func","x","sub","mean","Q","add","inputs","outputs","batchPrevS","batchA","batchR","batchNextS","tidy","Qs","mul","oneHot","predict","sum","targetQs","maxQ","argMax","targets","scalar","TDerror","square","replayNum","loadIdxes","usePrioritizedReplay","train_","replayIdxes","replayIdxes_","slice","arrayPrevS","arrayA","arrayR","arrayNextS","length","Math","floor","random","data","push","prevS","a","r","nextS","tensor3d","tensor1d","grads","computeGradients","abs","arraySync","forEach","absTD","idx","p","loss","print","gradsName","Object","keys","funcs","clipByGlobalNorm","values","applyGradients","reduce","acc","gn","learningRate","map","weight","prioritys","tensor","mem","softmax","multinomial","prioritizedReplayIdx","undefined","preState","action","reward","nextState","pop","unshift","index","dddqn","setBackend","dddqnModel","preArchive","state","expired","ready","then","channel","self","addEventListener","e","instruction","postMessage","args","archive","outputActions","div","actions","chooseByArgMax","chooseByMultinomial","chooseAction","playerName","find","name","store","bsz","Ws","tList","w","weightsBuffer","sl","save","loadWeights","load","assign"],"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","file":"agent.347b5559.js","sourceRoot":"..\\..\\cnnNLP_dddqn_webworker","sourcesContent":["import * as tf from \"@tensorflow/tfjs\"\r\nimport { registerTfex } from \"../../../lib/tfjs-extensions/src\"\r\nconst tfex = registerTfex(tf)\r\n\r\nexport class DDDQN {\r\n    constructor({\r\n        sequenceLen = 60,\r\n        stateVectorLen = 10,\r\n        embInner = [32, 32, 32],\r\n        layerNum = 8,\r\n        outputInner = [32, 32],\r\n        actionNum = 8,\r\n        memorySize = 1000,\r\n        updateTargetStep = 0.05,\r\n        minLearningRate = 1e-5\r\n    }) {\r\n\r\n        {\r\n            this.updateTargetStep = updateTargetStep\r\n\r\n            this.count = 0\r\n\r\n            this.actionNum = actionNum\r\n        }\r\n\r\n        {\r\n            this.model = this.buildModel({\r\n                sequenceLen: sequenceLen,\r\n                stateVectorLen: stateVectorLen,\r\n                embInner: embInner,\r\n                layerNum: layerNum,\r\n                outputInner: outputInner,\r\n                actionNum: actionNum\r\n            })\r\n            this.model.summary()\r\n\r\n            this.targetModel = this.buildModel({\r\n                sequenceLen: sequenceLen,\r\n                stateVectorLen: stateVectorLen,\r\n                embInner: embInner,\r\n                layerNum: layerNum,\r\n                outputInner: outputInner,\r\n                actionNum: actionNum\r\n            })\r\n\r\n            this.targetModel.setWeights(this.model.getWeights())\r\n        }\r\n\r\n        {\r\n            this.memorySize = memorySize\r\n            this.memory = []\r\n        }\r\n\r\n        {\r\n            this.minLearningRate = minLearningRate\r\n            this.optimizer = tf.train.adam(1e-3)\r\n        }\r\n\r\n    }\r\n\r\n    buildModel(\r\n        {\r\n            sequenceLen,\r\n            stateVectorLen,\r\n            layerNum = 32,\r\n            actionNum = 9\r\n        }\r\n    ) {\r\n        let stateSeqNet = (inputLayer, stateVectorLen, sequenceLen) => {\r\n            stateSeqLayer = tf.layers.conv1d({\r\n                filters: stateVectorLen,\r\n                kernelSize: [1],\r\n                activation: \"selu\",\r\n                padding: \"same\"\r\n            }).apply(inputLayer)\r\n            stateSeqLayer = tf.layers.batchNormalization({}).apply(stateSeqLayer)\r\n\r\n            stateSeqLayer = tf.layers.permute({\r\n                dims: [2, 1]\r\n            }).apply(stateSeqLayer)\r\n\r\n            stateSeqLayer = tf.layers.conv1d({\r\n                filters: sequenceLen,\r\n                kernelSize: [1],\r\n                activation: \"selu\",\r\n                padding: \"same\"\r\n            }).apply(stateSeqLayer)\r\n            stateSeqLayer = tf.layers.batchNormalization({}).apply(stateSeqLayer)\r\n\r\n            stateSeqLayer = tf.layers.permute({\r\n                dims: [2, 1]\r\n            }).apply(stateSeqLayer)\r\n\r\n            return stateSeqLayer\r\n        }\r\n        let input = tf.input({ shape: [sequenceLen, stateVectorLen] })\r\n\r\n        let stateSeqLayer = input\r\n\r\n        for (let i = 0; i < layerNum; i++) {\r\n            stateSeqLayer = stateSeqNet(stateSeqLayer, stateVectorLen + actionNum, sequenceLen)\r\n        }\r\n\r\n        let value = stateSeqLayer\r\n        {\r\n            value = stateSeqNet(value, stateVectorLen + actionNum, sequenceLen)\r\n\r\n            //用Global Average Pooling代替Fully Connected\r\n            value = tf.layers.globalAveragePooling1d({}).apply(value)\r\n            value = tf.layers.reshape({ targetShape: [1, stateVectorLen + actionNum] }).apply(value)\r\n\r\n            value = tf.layers.conv1d({\r\n                filters: 1,\r\n                kernelSize: [1],\r\n                activation: \"selu\",\r\n                padding: \"same\"\r\n            }).apply(value)\r\n            value = tf.layers.flatten().apply(value)\r\n        }\r\n\r\n        let A = stateSeqLayer\r\n        {\r\n            A = stateSeqNet(A, stateVectorLen + actionNum, sequenceLen)\r\n\r\n            //用Global Average Pooling代替Fully Connected\r\n            A = tf.layers.globalAveragePooling1d({}).apply(A)\r\n            A = tf.layers.reshape({ targetShape: [1, stateVectorLen + actionNum] }).apply(A)\r\n\r\n            A = tf.layers.conv1d({\r\n                filters: actionNum,\r\n                kernelSize: [1],\r\n                activation: \"selu\",\r\n                padding: \"same\"\r\n            }).apply(A)\r\n            A = tf.layers.flatten().apply(A)\r\n        }\r\n\r\n        let advantage = tfex.layers.lambda({\r\n            func: (x) => {\r\n                return tf.sub(x, tf.mean(x, 1, true))\r\n            }\r\n        }).apply([A])\r\n\r\n        let Q = tf.layers.add().apply([value, advantage])\r\n\r\n        return tf.model({ inputs: [input], outputs: Q })\r\n    }\r\n\r\n    TDerror(batchPrevS, batchA, batchR, batchNextS) {\r\n        return tf.tidy(() => {\r\n            const Qs = tf.tidy(() => {\r\n                return tf.mul(\r\n                    tf.oneHot(batchA, this.actionNum),\r\n                    this.model.predict(batchPrevS)\r\n                ).sum(1)\r\n            })\r\n\r\n            const targetQs = tf.tidy(() => {\r\n                const maxQ = tf.mul(\r\n                    tf.oneHot(\r\n                        tf.argMax(\r\n                            this.model.predict(batchNextS),\r\n                            1\r\n                        ),\r\n                        this.actionNum\r\n                    ),\r\n                    this.targetModel.predict(batchNextS)\r\n                ).sum(1)\r\n                const targets = batchR.add(maxQ.mul(tf.scalar(0.99)));\r\n                return targets;\r\n            })\r\n\r\n            return tf.sub(targetQs, Qs)\r\n        })\r\n    }\r\n\r\n    loss(TDerror) {\r\n        return tf.tidy(() => {\r\n            return tf.mean(\r\n                tf.square(TDerror)\r\n            )\r\n        })\r\n    }\r\n\r\n    train(replayNum = 100, loadIdxes = [null], usePrioritizedReplay = false) {\r\n        tf.tidy(() => {\r\n            let train_ = (replayIdxes) => {\r\n                tf.tidy(() => {\r\n                    let replayIdxes_ = replayIdxes.slice()\r\n\r\n                    let arrayPrevS = []\r\n                    let arrayA = []\r\n                    let arrayR = []\r\n                    let arrayNextS = []\r\n\r\n                    for (let i = 0; i < replayNum; i++) {\r\n                        if (replayIdxes_[i] == null || replayIdxes_[i] >= this.memory.length) {\r\n                            replayIdxes_[i] = Math.floor(Math.random() * this.memory.length);\r\n                        }\r\n                        let data = this.memory[replayIdxes_[i]]\r\n                        // console.log(data)\r\n                        arrayPrevS.push(data.prevS)\r\n                        arrayA.push(data.a)\r\n                        arrayR.push(data.r)\r\n                        arrayNextS.push(data.nextS)\r\n                    }\r\n\r\n                    let batchPrevS = tf.tensor3d(arrayPrevS)\r\n                    let batchA = tf.tensor1d(arrayA, 'int32')\r\n                    let batchR = tf.tensor1d(arrayR)\r\n                    let batchNextS = tf.tensor3d(arrayNextS)\r\n\r\n                    let grads = this.optimizer.computeGradients(\r\n                        () => {\r\n                            let TDerror = this.TDerror(\r\n                                batchPrevS,\r\n                                batchA,\r\n                                batchR,\r\n                                batchNextS\r\n                            )\r\n                            tf.abs(TDerror).arraySync()\r\n                                .forEach((absTD, idx) => {\r\n                                    this.memory[replayIdxes_[idx]].p = absTD\r\n                                })\r\n                            let loss = this.loss(TDerror)\r\n                            loss.print()\r\n                            return loss\r\n                        }, this.model.getWeights(true)).grads\r\n\r\n                    let gradsName = Object.keys(grads)\r\n                    grads = tfex.funcs.clipByGlobalNorm(Object.values(grads), 0.05)[0]\r\n\r\n                    this.optimizer.applyGradients(gradsName.reduce((acc, gn, idx) => {\r\n                        acc[gn] = grads[idx]\r\n                        // if (gn == \"weighted_average_WeightedAverage1/w\") {\r\n                        //     acc[gn].print()\r\n                        // }\r\n                        return acc\r\n                    }, {}))\r\n\r\n                    this.count++\r\n\r\n                    this.optimizer.learningRate = (1e-4 / this.count ** 0.5) + this.minLearningRate\r\n\r\n                    this.targetModel.setWeights(\r\n                        this.targetModel.getWeights().map((weight, idx) => {\r\n                            return tf.add(\r\n                                tf.mul(this.model.getWeights()[idx], this.updateTargetStep),\r\n                                tf.mul(weight, 1 - this.updateTargetStep),\r\n                            )\r\n                        })\r\n                    )\r\n                })\r\n            }\r\n            if (this.memory.length != 0) {\r\n                if (usePrioritizedReplay) {\r\n                    let prioritizedReplayBuffer = tf.tidy(() => {\r\n                        let prioritys = tf.tensor(this.memory.map(mem => mem.p))\r\n                        prioritys = tf.softmax(prioritys)\r\n                        // prioritys.print()\r\n                        return tf.multinomial(prioritys, replayNum, null, true).arraySync()\r\n                    })\r\n                    // console.log(prioritizedReplayBuffer)\r\n                    train_(prioritizedReplayBuffer.map((prioritizedReplayIdx, idx) => {\r\n                        return loadIdxes[idx] == null || loadIdxes[idx] == undefined ? prioritizedReplayIdx : loadIdxes[idx]\r\n                    }))\r\n                } else {\r\n                    train_(loadIdxes)\r\n                }\r\n            }\r\n        })\r\n    }\r\n\r\n    store(preState, action, reward, nextState) {\r\n        if (this.memory.length == this.memorySize) {\r\n            this.memory.pop()\r\n        }\r\n        this.memory.unshift({\r\n            prevS: preState,\r\n            a: action,\r\n            r: reward,\r\n            nextS: nextState,\r\n            p: 1\r\n        })\r\n    }\r\n\r\n    load(index) {\r\n        if (index == null || index >= this.memory.length) {\r\n            index = Math.floor(Math.random() * this.memory.length);\r\n        }\r\n        return this.memory[index]\r\n    }\r\n\r\n}\r\n\r\nexport function dddqn({\r\n    sequenceLen = 60,\r\n    stateVectorLen = 10,\r\n    embInner = [32, 32, 32],\r\n    layerNum = 8,\r\n    outputInner = [32, 32],\r\n    actionNum = 8,\r\n    memorySize = 1000,\r\n    updateTargetStep = 0.05,\r\n    minLearningRate = 1e-3\r\n}) {\r\n    return new DDDQN({\r\n        sequenceLen,\r\n        stateVectorLen,\r\n        embInner,\r\n        layerNum,\r\n        outputInner,\r\n        actionNum,\r\n        memorySize,\r\n        updateTargetStep,\r\n        minLearningRate\r\n    })\r\n}","export * from './model'","import * as tf from \"@tensorflow/tfjs\"\r\nimport { dddqn } from \"../../src/js/MirageNet/dddqn\"\r\nimport { registerTfex } from \"../../src/lib/tfjs-extensions/src\"\r\nconst tfex = registerTfex(tf)\r\n\r\ntf.setBackend(\"webgl\")\r\n\r\nlet actionNum = 8\r\n\r\nlet dddqnModel = dddqn({\r\n    sequenceLen: 16,\r\n    stateVectorLen: 55,\r\n    layerNum: 16,\r\n    actionNum: actionNum,\r\n    memorySize: 3200,\r\n    minLearningRate: 5e-4,\r\n    updateTargetStep: 0.1\r\n})\r\n\r\nlet preArchive = {\r\n    \"player1\": {\r\n        state: null,\r\n        action: null,\r\n        expired: true\r\n    },\r\n    \"player2\": {\r\n        state: null,\r\n        action: null,\r\n        expired: true\r\n    }\r\n}\r\n\r\ntf.ready().then(() => {\r\n    let channel = self\r\n    channel.addEventListener(\"message\", (e) => {\r\n        tf.tidy(() => {\r\n            switch (e.data.instruction) {\r\n                case 'init': {\r\n                    channel.postMessage({ instruction: \"init\" })\r\n                    break\r\n                }\r\n                case 'ctrl': {\r\n                    if (Object.keys(e.data.args.archive).length != 0) {\r\n                        let outputActions = dddqnModel\r\n                            .model\r\n                            .predict(\r\n                                tf.tensor(\r\n                                    Object.values(e.data.args.archive)\r\n                                        .map(archive => {\r\n                                            return archive.state\r\n                                        })\r\n                                )\r\n                            )\r\n                        outputActions = tf.softmax(outputActions, 1)\r\n                        outputActions = tf.div(\r\n                            tf.add(\r\n                                outputActions,\r\n                                1 / outputActions.shape[1]\r\n                            ),\r\n                            2\r\n                        )\r\n                        // outputActions.sum(1).print()\r\n                        outputActions.print()\r\n\r\n                        let actions = []\r\n                        let chooseByArgMax = outputActions.argMax(1)\r\n                            .reshape([-1])\r\n                            .arraySync()\r\n                        let chooseByMultinomial = tf.multinomial(outputActions, 1, null, true)\r\n                            .reshape([-1])\r\n                            .arraySync()\r\n                        e.data.args.chooseAction.forEach((chooseAction, idx) => {\r\n                            if (chooseAction == \"argMax\") {\r\n                                actions[idx] = chooseByArgMax[idx]\r\n                            } else if (chooseAction == \"multinomial\") {\r\n                                actions[idx] = chooseByMultinomial[idx]\r\n                            }\r\n                        })\r\n\r\n\r\n                        Object.keys(preArchive).forEach((playerName) => {\r\n                            if (Object.keys(e.data.args.archive).find(name => name === playerName) !== undefined) {\r\n                                if (preArchive[playerName].expired == false) {\r\n                                    dddqnModel.store(\r\n                                        preArchive[playerName].state,\r\n                                        preArchive[playerName].action,\r\n                                        e.data.args.archive[playerName].reward,\r\n                                        e.data.args.archive[playerName].state,\r\n                                    )\r\n                                }\r\n                                preArchive[playerName].expired = false\r\n                            } else {\r\n                                preArchive[playerName].expired = true\r\n                            }\r\n                        })\r\n\r\n                        Object.keys(e.data.args.archive).forEach((playerName, idx) => {\r\n                            preArchive[playerName].state = e.data.args.archive[playerName].state\r\n                            preArchive[playerName].action = actions[idx]\r\n                        })\r\n                        channel.postMessage({\r\n                            instruction: \"ctrl\",\r\n                            args: {\r\n                                archive: Object.keys(e.data.args.archive).reduce((acc, name, idx) => {\r\n                                    acc[name] = {\r\n                                        action: actions[idx]\r\n                                    }\r\n                                    return acc\r\n                                }, {})\r\n                            }\r\n                        })\r\n                    } else {\r\n                        channel.postMessage({\r\n                            instruction: \"ctrl\",\r\n                            args: {\r\n                                archive: {}\r\n                            }\r\n                        })\r\n                    }\r\n                    // console.log(\"ctrl\")\r\n                    break\r\n                }\r\n                case 'train': {\r\n                    dddqnModel.train(e.data.args.bsz, e.data.args.replayIdxes, e.data.args.usePrioritizedReplay)\r\n                    channel.postMessage({ instruction: \"train\" })\r\n                    break\r\n                }\r\n                case 'save': {\r\n                    tf.tidy(() => {\r\n                        let Ws = dddqnModel.model.getWeights()\r\n                        let tList = Ws.reduce((acc, w) => {\r\n                            acc[w.name] = w\r\n                            return acc\r\n                        }, {})\r\n                        channel.postMessage({\r\n                            instruction: \"save\",\r\n                            args: {\r\n                                weightsBuffer: tfex.sl.save(tList)\r\n                            }\r\n                        })\r\n                    })\r\n\r\n                    break\r\n                }\r\n                case 'load': {\r\n                    let loadWeights = tfex.sl.load(e.data.args.weightsBuffer)\r\n                    dddqnModel.model.getWeights().forEach((w) => {\r\n                        w.assign(loadWeights[w.name])\r\n                    })\r\n                    dddqnModel.targetModel.setWeights(\r\n                        dddqnModel.model.getWeights()\r\n                    )\r\n                    channel.postMessage({ instruction: \"load\" })\r\n                    break\r\n                }\r\n            }\r\n        })\r\n    })\r\n})"]}