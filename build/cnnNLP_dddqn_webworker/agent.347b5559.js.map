{"version":3,"sources":["../src/js/MirageNet/dddqn/model.js","../src/js/MirageNet/dddqn/index.js","js/agent.js"],"names":["tfex","tf","DDDQN","sequenceLen","inputNum","embInner","filters","outputInner","actionNum","memorySize","updateTargetStep","learningRate","count","model","buildModel","summary","targetModel","setWeights","getWeights","memory","optimizer","train","adam","input","shape","preASV","WeightedSequence","args","axis","script","layers","Layer","inputShape","w","addWeight","initializers","constant","value","write","sin","linspace","Math","PI","built","inputs","kwargs","invokeCallHook","funcs","einsum","read","serialization","registerClass","WSLayer","apply","cnnLayer","conv1d","kernelSize","activation","padding","batchNormalization","dropout","rate","strides","A","mean","lambda","func","x","outputShape","advantage","y","sub","Q","flatten","add","ASV","softmax","AAV","tidy","aav","relu","div","sum","WeightedAverage","length","randomNormal","stddev","mul","action","outputs","arrayPrevS","arrayPrevASV","arrayA","arrayR","arrayNextS","arrayNextASV","batchPrevS","tensor3d","batchPrevASV","tensor2d","batchA","tensor1d","batchR","batchNextS","predictions","predict","maxQ","reshape","max","predMask","oneHot","targets","scalar","losses","softmaxCrossEntropy","asType","expandDims","square","replayNum","loadIdxes","usePrioritizedReplay","train_","replayIdxes","i","data","load","push","grads","computeGradients","loss","print","gradsName","Object","keys","clipByGlobalNorm","values","applyGradients","reduce","acc","gn","idx","e","tensor","map","mem","abs","multinomial","arraySync","prioritizedReplayIdx","undefined","preState","reward","nextState","nextASV","pop","unshift","index","floor","random","dddqn","setBackend","dddqnModel","preArchive","state","fill","expired","ready","then","channel","self","addEventListener","instruction","postMessage","archive","ASVsAndActions","stack","playerName","actions","chooseByArgMax","argMax","chooseByMultinomial","chooseAction","forEach","find","name","store","dispose","keep","unstack","bsz","Ws","tList","weightsBuffer","sl","save","loadWeights","assign"],"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","file":"agent.347b5559.js","sourceRoot":"..\\..\\cnnNLP_dddqn_webworker","sourcesContent":["import * as tf from \"@tensorflow/tfjs\"\r\nimport { registerTfex } from \"../../../lib/tfjs-extensions/src\"\r\nconst tfex = registerTfex(tf)\r\n\r\nexport class DDDQN {\r\n    constructor({\r\n        sequenceLen = 60,\r\n        inputNum = 10,\r\n        embInner = [32, 32, 32],\r\n        filters = [8, 8, 8, 8],\r\n        outputInner = [32, 32],\r\n        actionNum = 8,\r\n        memorySize = 1000,\r\n        updateTargetStep = 20,\r\n        learningRate = 1e-3\r\n    }) {\r\n\r\n        {\r\n            this.updateTargetStep = updateTargetStep\r\n\r\n            this.count = 0\r\n\r\n            this.actionNum = actionNum\r\n        }\r\n\r\n        {\r\n            this.model = this.buildModel({\r\n                sequenceLen: sequenceLen,\r\n                inputNum: inputNum,\r\n                embInner: embInner,\r\n                filters: filters,\r\n                outputInner: outputInner,\r\n                actionNum: actionNum\r\n            })\r\n            this.model.summary()\r\n\r\n            this.targetModel = this.buildModel({\r\n                sequenceLen: sequenceLen,\r\n                inputNum: inputNum,\r\n                embInner: embInner,\r\n                filters: filters,\r\n                outputInner: outputInner,\r\n                actionNum: actionNum\r\n            })\r\n\r\n            this.targetModel.setWeights(this.model.getWeights())\r\n        }\r\n\r\n        {\r\n            this.memorySize = memorySize\r\n            this.memory = []\r\n        }\r\n\r\n        {\r\n            this.optimizer = tf.train.adam(learningRate)\r\n        }\r\n\r\n    }\r\n\r\n    buildModel(\r\n        {\r\n            sequenceLen,\r\n            inputNum,\r\n            filters = 8,\r\n            actionNum = 36\r\n        }\r\n    ) {\r\n        let input = tf.input({ shape: [sequenceLen, inputNum] })\r\n        let preASV = tf.input({ shape: [actionNum] })\r\n\r\n        class WeightedSequence extends tf.layers.Layer {\r\n            constructor(args = { axis, script }) {\r\n                super({})\r\n                this.axis = args.axis\r\n                this.script = args.script\r\n            }\r\n            build(inputShape) {\r\n                this.w = this.addWeight(\"w\", [inputShape[this.axis]], \"float32\", tf.initializers.constant({ value: 0.5 }))\r\n                this.w.write(tf.sin(tf.linspace(Math.PI / 2, 0.1, inputShape[this.axis])))\r\n                this.built = true\r\n            }\r\n            computeOutputShape(inputShape) {\r\n                return inputShape\r\n            }\r\n            call(inputs, kwargs) {\r\n                //console.log(\"LayerNorm call\")\r\n                this.invokeCallHook(inputs, kwargs)\r\n                return tfex.funcs.einsum(this.script, inputs[0], this.w.read())\r\n            }\r\n\r\n            /*\r\n            * If a custom layer class is to support serialization, it must implement\r\n            * the `className` static getter.\r\n            */\r\n            static get className() {\r\n                return \"WeightedSequence\"\r\n            }\r\n        }\r\n        // registerClass\r\n        tf.serialization.registerClass(WeightedSequence)\r\n\r\n        let WSLayer = new WeightedSequence({ axis: 1, script: \"ijk,j->ijk\" }).apply(input)\r\n\r\n        let cnnLayer = tf.layers.conv1d({\r\n            filters: filters * 2,\r\n            kernelSize: [1],\r\n            activation: \"selu\",\r\n            padding: \"same\"\r\n        }).apply(WSLayer)\r\n        cnnLayer = tf.layers.batchNormalization({}).apply(cnnLayer)\r\n        cnnLayer = tf.layers.conv1d({\r\n            filters: filters * 2,\r\n            kernelSize: [1],\r\n            activation: \"selu\",\r\n            padding: \"same\"\r\n        }).apply(cnnLayer)\r\n        cnnLayer = tf.layers.batchNormalization({}).apply(cnnLayer)\r\n\r\n        cnnLayer = tf.layers.dropout({ rate: 0.05 }).apply(cnnLayer)\r\n\r\n        while (1 <= cnnLayer.shape[1] / 2) {\r\n            cnnLayer = tf.layers.conv1d({\r\n                filters: filters,\r\n                kernelSize: [2],\r\n                strides: [2],\r\n                activation: \"selu\",\r\n                padding: \"same\"\r\n            }).apply(cnnLayer)\r\n            cnnLayer = tf.layers.batchNormalization({}).apply(cnnLayer)\r\n            cnnLayer = tf.layers.dropout({ rate: 0.05 }).apply(cnnLayer)\r\n        }\r\n\r\n        let value = tf.layers.conv1d({\r\n            filters: filters * 2,\r\n            kernelSize: [1],\r\n            activation: \"selu\",\r\n            padding: \"same\"\r\n        }).apply(cnnLayer)\r\n        value = tf.layers.batchNormalization({}).apply(value)\r\n        value = tf.layers.conv1d({\r\n            filters: filters * 2,\r\n            kernelSize: [1],\r\n            activation: \"selu\",\r\n            padding: \"same\"\r\n        }).apply(value)\r\n        value = tf.layers.batchNormalization({}).apply(value)\r\n        value = tf.layers.conv1d({\r\n            filters: actionNum,\r\n            kernelSize: [1],\r\n            activation: \"softmax\",\r\n            padding: \"same\"\r\n        }).apply(value)\r\n\r\n        let A = tf.layers.conv1d({\r\n            filters: filters * 2,\r\n            kernelSize: [1],\r\n            activation: \"selu\",\r\n            padding: \"same\"\r\n        }).apply(cnnLayer)\r\n        A = tf.layers.batchNormalization({}).apply(A)\r\n        A = tf.layers.conv1d({\r\n            filters: filters * 2,\r\n            kernelSize: [1],\r\n            activation: \"selu\",\r\n            padding: \"same\"\r\n        }).apply(A)\r\n        A = tf.layers.batchNormalization({}).apply(A)\r\n        A = tf.layers.conv1d({\r\n            filters: actionNum,\r\n            kernelSize: [1],\r\n            activation: \"softmax\",\r\n            padding: \"same\"\r\n        }).apply(A)\r\n\r\n        let mean = tfex.layers.lambda({\r\n            func: (x) => {\r\n                return tf.mean(x, 1, true)\r\n            },\r\n            outputShape: [1]\r\n        }).apply([A])\r\n\r\n        let advantage = tfex.layers.lambda({\r\n            func: (x, y) => {\r\n                return tf.sub(x, y)\r\n            }\r\n        }).apply([A, mean])\r\n\r\n        let Q = tf.layers.flatten().apply(\r\n            tf.layers.add().apply([value, advantage])\r\n        )\r\n\r\n        //Action Selection Value\r\n        let ASV = tf.layers.softmax().apply(Q)\r\n\r\n        //Action Activation Value\r\n        let AAV = tfex.layers.lambda({\r\n            func: (ASV, preASV) => {\r\n                return tf.tidy(() => {\r\n                    let aav = tf.sub(ASV, preASV)\r\n                    aav = tf.relu(aav)\r\n                    aav = tf.div(aav, aav.sum(1, true))\r\n                    return aav\r\n                })\r\n            }\r\n        }).apply([ASV, preASV])\r\n\r\n        // AAV = tf.layers.softmax().apply(AAV)\r\n\r\n        class WeightedAverage extends tf.layers.Layer {\r\n            constructor(args) {\r\n                super({})\r\n            }\r\n            build(inputShape) {\r\n                // console.log(\"LayerNorm build : \")\r\n                this.w = this.addWeight(\"w\", [inputShape[0][inputShape.length - 1]], \"float32\", tf.initializers.randomNormal({ mean: 0.2, stddev: 0.05 }))\r\n                this.built = true\r\n            }\r\n            computeOutputShape(inputShape) {\r\n                //console.log(\"LayerNorm computeOutputShape\")\r\n                //console.log(inputShape)\r\n                return inputShape[0]\r\n            }\r\n            call(inputs, kwargs) {\r\n                //console.log(\"LayerNorm call\")\r\n                this.invokeCallHook(inputs, kwargs)\r\n                return tf.add(\r\n                    tf.mul(inputs[0], this.w.read()),\r\n                    tf.mul(inputs[1], tf.sub(1, this.w.read()))\r\n                )\r\n            }\r\n\r\n            /*\r\n            * If a custom layer class is to support serialization, it must implement\r\n            * the `className` static getter.\r\n            */\r\n            static get className() {\r\n                return \"WeightedAverage\"\r\n            }\r\n        }\r\n        // registerClass\r\n        tf.serialization.registerClass(WeightedAverage)\r\n\r\n        let action = new WeightedAverage().apply([ASV, AAV])\r\n\r\n        return tf.model({ inputs: [input, preASV], outputs: [ASV, action] })\r\n    }\r\n\r\n    loss(arrayPrevS, arrayPrevASV, arrayA, arrayR, arrayNextS, arrayNextASV) {\r\n        return tf.tidy(() => {\r\n            // console.log(arrayPrevS)\r\n            let batchPrevS = tf.tensor3d(arrayPrevS)\r\n            let batchPrevASV = tf.tensor2d(arrayPrevASV)\r\n            let batchA = tf.tensor1d(arrayA, 'int32')\r\n            let batchR = tf.tensor1d(arrayR)\r\n            let batchNextS = tf.tensor3d(arrayNextS)\r\n            let batchNextASV = tf.tensor2d(arrayNextASV)\r\n\r\n            const predictions = this.model.predict([batchPrevS, batchPrevASV]);\r\n\r\n            // const maxQ = this.targetModel.predict([batchNextS, batchNextASV])[1].reshape([arrayPrevS.length, this.actionNum]).max(1)\r\n            const maxQ = this.model.predict([batchNextS, predictions[0]])[1].reshape([arrayPrevS.length, this.actionNum]).max(1)\r\n\r\n            const predMask = tf.oneHot(batchA, this.actionNum);\r\n\r\n            const targets = batchR.add(maxQ.mul(tf.scalar(0.99)));\r\n            return tf.losses.softmaxCrossEntropy(predMask.asType('float32'), predictions[1].sub(targets.expandDims(1)).square())\r\n            // return tf.mul(predictions[1].sub(targets.expandDims(1)).square(), predMask.asType('float32')).mean();\r\n        })\r\n\r\n    }\r\n\r\n    train(replayNum = 100, loadIdxes = [null], usePrioritizedReplay = false) {\r\n        tf.tidy(() => {\r\n            let train_ = (replayIdxes) => {\r\n                tf.tidy(() => {\r\n                    let arrayPrevS = []\r\n                    let arrayPrevASV = []\r\n                    let arrayA = []\r\n                    let arrayR = []\r\n                    let arrayNextS = []\r\n                    let arrayNextASV = []\r\n\r\n                    for (let i = 0; i < replayNum; i++) {\r\n                        let data = this.load(replayIdxes[i])\r\n                        // console.log(data)\r\n                        arrayPrevS.push(data[0])\r\n                        arrayPrevASV.push(data[1])\r\n                        arrayA.push(data[2])\r\n                        arrayR.push(data[3])\r\n                        arrayNextS.push(data[4])\r\n                        arrayNextASV.push(data[5])\r\n                    }\r\n\r\n                    let grads = this.optimizer.computeGradients(\r\n                        () => {\r\n                            let loss = this.loss(arrayPrevS, arrayPrevASV, arrayA, arrayR, arrayNextS, arrayNextASV)\r\n                            loss.print()\r\n                            return loss\r\n                        }, this.model.getWeights(true)).grads\r\n\r\n                    let gradsName = Object.keys(grads)\r\n                    grads = tfex.funcs.clipByGlobalNorm(Object.values(grads), 0.05)[0]\r\n\r\n                    this.optimizer.applyGradients(gradsName.reduce((acc, gn, idx) => {\r\n                        acc[gn] = grads[idx]\r\n                        // if (gn == \"weighted_average_WeightedAverage1/w\") {\r\n                        //     acc[gn].print()\r\n                        // }\r\n                        return acc\r\n                    }, {}))\r\n\r\n                    this.count++\r\n\r\n                    if (this.count >= this.updateTargetStep) {\r\n\r\n                        this.targetModel.setWeights(this.model.getWeights())\r\n                        this.count = 0\r\n                    }\r\n                })\r\n            }\r\n            if (this.memory.length != 0) {\r\n                if (usePrioritizedReplay) {\r\n                    let prioritizedReplayBuffer = tf.tidy(() => {\r\n                        let e = tf.tensor(this.memory.map(mem => mem[3]))\r\n                        e = tf.abs(e.sub(e.mean()))\r\n                        e = e.div(e.sum(0, true))\r\n                        // e.print()\r\n                        return tf.multinomial(e, replayNum, null, true).arraySync()\r\n                    })\r\n                    // console.log(prioritizedReplayBuffer)\r\n                    train_(prioritizedReplayBuffer.map((prioritizedReplayIdx, idx) => {\r\n                        return loadIdxes[idx] == null || loadIdxes[idx] == undefined ? prioritizedReplayIdx : loadIdxes[idx]\r\n                    }))\r\n                } else {\r\n                    train_(loadIdxes)\r\n                }\r\n            }\r\n        })\r\n    }\r\n\r\n    store(preState, preASV, action, reward, nextState, nextASV) {\r\n        if (this.memory.length == this.memorySize) {\r\n            this.memory.pop()\r\n        }\r\n        this.memory.unshift([preState, preASV, action, reward, nextState, nextASV])\r\n    }\r\n\r\n    load(index) {\r\n        if (index == null || index >= this.memory.length) {\r\n            index = Math.floor(Math.random() * this.memory.length);\r\n        }\r\n        return this.memory[index]\r\n    }\r\n\r\n}\r\n\r\nexport function dddqn({\r\n    sequenceLen = 60,\r\n    inputNum = 10,\r\n    embInner = [32, 32, 32],\r\n    filters = [8, 8, 8, 8],\r\n    outputInner = [32, 32],\r\n    actionNum = 8,\r\n    memorySize = 1000,\r\n    updateTargetStep = 20,\r\n    learningRate = 1e-3\r\n}) {\r\n    return new DDDQN({\r\n        sequenceLen,\r\n        inputNum,\r\n        embInner,\r\n        filters,\r\n        outputInner,\r\n        actionNum,\r\n        memorySize,\r\n        updateTargetStep,\r\n        learningRate\r\n    })\r\n}","export * from './model'","import * as tf from \"@tensorflow/tfjs\"\r\nimport { dddqn } from \"../../src/js/MirageNet/dddqn\"\r\nimport { registerTfex } from \"../../src/lib/tfjs-extensions/src\"\r\nconst tfex = registerTfex(tf)\r\n\r\ntf.setBackend(\"webgl\")\r\n\r\nlet actionNum = 9\r\n\r\nlet dddqnModel = dddqn({\r\n    sequenceLen: 64,\r\n    inputNum: 20,\r\n    filters: 32,\r\n    actionNum: actionNum,\r\n    memorySize: 3200,\r\n    learningRate: 1e-5,\r\n    updateTargetStep: 32\r\n})\r\n\r\nlet preArchive = {\r\n    \"player1\": {\r\n        state: null,\r\n        ASV: tf.fill([actionNum], 1e-5, \"float32\"),\r\n        preASV: tf.fill([actionNum], 1e-5, \"float32\"),\r\n        action: null,\r\n        expired: true\r\n    },\r\n    \"player2\": {\r\n        state: null,\r\n        ASV: tf.fill([actionNum], 1e-5, \"float32\"),\r\n        preASV: tf.fill([actionNum], 1e-5, \"float32\"),\r\n        action: null,\r\n        expired: true\r\n    }\r\n}\r\n\r\ntf.ready().then(() => {\r\n    let channel = self\r\n    channel.addEventListener(\"message\", (e) => {\r\n        tf.tidy(() => {\r\n            switch (e.data.instruction) {\r\n                case 'init': {\r\n                    channel.postMessage({ instruction: \"init\" })\r\n                    break\r\n                }\r\n                case 'ctrl': {\r\n                    if (Object.keys(e.data.args.archive).length != 0) {\r\n                        let ASVsAndActions = dddqnModel\r\n                            .model\r\n                            .predict([\r\n                                tf.tensor(\r\n                                    Object.values(e.data.args.archive)\r\n                                        .map(archive => {\r\n                                            return archive.state\r\n                                        })\r\n                                ),\r\n                                tf.stack(\r\n                                    Object.keys(e.data.args.archive)\r\n                                        .map(playerName => {\r\n                                            return preArchive[playerName].ASV\r\n                                        })\r\n                                )\r\n                            ])\r\n                        // ASVsAndActions[1].sum(1).print()\r\n                        // ASVsAndActions[1].print()\r\n\r\n                        let actions = []\r\n                        let chooseByArgMax = ASVsAndActions[1].argMax(1)\r\n                            // selectAction(outputs)\r\n                            .reshape([-1])\r\n                            .arraySync()\r\n                        let chooseByMultinomial = tf.multinomial(ASVsAndActions[1], 1, null, true)\r\n                            // selectAction(outputs)\r\n                            .reshape([-1])\r\n                            .arraySync()\r\n                        e.data.args.chooseAction.forEach((chooseAction, idx) => {\r\n                            if (chooseAction == \"argMax\") {\r\n                                actions[idx] = chooseByArgMax[idx]\r\n                            } else if (chooseAction == \"multinomial\") {\r\n                                actions[idx] = chooseByMultinomial[idx]\r\n                            }\r\n                        })\r\n\r\n\r\n                        Object.keys(preArchive).forEach((playerName) => {\r\n                            if (Object.keys(e.data.args.archive).find(name => name === playerName) !== undefined) {\r\n                                if (preArchive[playerName].expired == false) {\r\n                                    dddqnModel.store(\r\n                                        preArchive[playerName].state,\r\n                                        preArchive[playerName].preASV.arraySync(),\r\n                                        preArchive[playerName].action,\r\n                                        e.data.args.archive[playerName].reward,\r\n                                        e.data.args.archive[playerName].state,\r\n                                        preArchive[playerName].ASV.arraySync()\r\n                                    )\r\n                                }\r\n                                preArchive[playerName].expired = false\r\n                            } else {\r\n                                preArchive[playerName].expired = true\r\n                            }\r\n                        })\r\n\r\n                        Object.keys(e.data.args.archive).forEach((playerName, idx) => {\r\n                            preArchive[playerName].state = e.data.args.archive[playerName].state\r\n                            tf.dispose(preArchive[playerName].preASV)\r\n                            preArchive[playerName].preASV = tf.keep(preArchive[playerName].ASV)\r\n                            preArchive[playerName].ASV = tf.keep(tf.unstack(ASVsAndActions[0])[idx])\r\n                            preArchive[playerName].action = actions[idx]\r\n                        })\r\n                        channel.postMessage({\r\n                            instruction: \"ctrl\",\r\n                            args: {\r\n                                archive: Object.keys(e.data.args.archive).reduce((acc, name, idx) => {\r\n                                    acc[name] = {\r\n                                        action: actions[idx]\r\n                                    }\r\n                                    return acc\r\n                                }, {})\r\n                            }\r\n                        })\r\n                    } else {\r\n                        channel.postMessage({\r\n                            instruction: \"ctrl\",\r\n                            args: {\r\n                                archive: {}\r\n                            }\r\n                        })\r\n                    }\r\n                    // console.log(\"ctrl\")\r\n                    break\r\n                }\r\n                case 'train': {\r\n                    dddqnModel.train(e.data.args.bsz, e.data.args.replayIdxes, e.data.args.usePrioritizedReplay)\r\n                    channel.postMessage({ instruction: \"train\" })\r\n                    break\r\n                }\r\n                case 'save': {\r\n                    tf.tidy(() => {\r\n                        let Ws = dddqnModel.model.getWeights()\r\n                        let tList = Ws.reduce((acc, w) => {\r\n                            acc[w.name] = w\r\n                            return acc\r\n                        }, {})\r\n                        channel.postMessage({\r\n                            instruction: \"save\",\r\n                            args: {\r\n                                weightsBuffer: tfex.sl.save(tList)\r\n                            }\r\n                        })\r\n                    })\r\n\r\n                    break\r\n                }\r\n                case 'load': {\r\n                    let loadWeights = tfex.sl.load(e.data.args.weightsBuffer)\r\n                    dddqnModel.model.getWeights().forEach((w) => {\r\n                        w.assign(loadWeights[w.name])\r\n                    })\r\n                    dddqnModel.targetModel.setWeights(\r\n                        dddqnModel.model.getWeights()\r\n                    )\r\n                    channel.postMessage({ instruction: \"load\" })\r\n                    break\r\n                }\r\n            }\r\n        })\r\n    })\r\n})"]}