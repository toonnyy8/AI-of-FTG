{"version":3,"sources":["../src/js/MirageNet/dddqn/model.js","../src/js/MirageNet/dddqn/index.js","js/agent.js"],"names":["tfex","tf","DDDQN","sequenceLen","stateVectorLen","embInner","layerNum","outputInner","actionsNum","memorySize","updateTargetStep","minLearningRate","count","model","buildModel","summary","targetModel","setWeights","getWeights","memory","optimizer","train","adam","stateSeqNet","inputLayer","stateSeqLayer","layers","conv1d","filters","kernelSize","activation","padding","apply","batchNormalization","permute","dims","input","shape","i","reduce","a","b","outputs","map","actionNum","value","globalAveragePooling1d","reshape","targetShape","flatten","A","Q","lambda","func","x","sub","mean","add","inputs","batchPrevS","batchAs","batchRs","batchNextS","tidy","predictions","predict","Qs","actionType","mul","oneHot","sum","targetPredictions","maxQ","argMax","targets","scalar","replayNum","loadIdxes","usePrioritizedReplay","train_","replayIdxes","replayIdxes_","slice","arrayPrevS","arrayAs","Array","length","fill","arrayRs","arrayNextS","Math","floor","random","data","push","prevS","j","As","Rs","nextS","tensor3d","arrayA","tensor1d","arrayR","grads","computeGradients","tQandQ","targetQs","addN","abs","arraySync","forEach","absTD","idx","p","loss","stack","losses","huberLoss","print","gradsName","Object","keys","funcs","clipByGlobalNorm","values","applyGradients","acc","gn","learningRate","weight","prioritys","tensor","mem","softmax","multinomial","prioritizedReplayIdx","undefined","preState","actions","rewards","nextState","pop","unshift","index","dddqn","setBackend","dddqnModel","preArchive","state","expired","ready","then","channel","self","addEventListener","e","instruction","postMessage","args","archive","outputActions","outputAction","div","chooseByArgMax","chooseByMultinomial","chooseActionRandomValue","playerName","find","name","store","bsz","Ws","tList","w","weightsBuffer","sl","save","loadWeights","load","assign"],"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","file":"agent.347b5559.js","sourceRoot":"..\\..\\cnnNLP_dddqn_webworker","sourcesContent":["import * as tf from \"@tensorflow/tfjs\"\r\nimport { registerTfex } from \"../../../lib/tfjs-extensions/src\"\r\nconst tfex = registerTfex(tf)\r\n\r\nexport class DDDQN {\r\n    constructor({\r\n        sequenceLen = 60,\r\n        stateVectorLen = 10,\r\n        embInner = [32, 32, 32],\r\n        layerNum = 8,\r\n        outputInner = [32, 32],\r\n        actionsNum = [3, 3, 4],\r\n        memorySize = 1000,\r\n        updateTargetStep = 0.05,\r\n        minLearningRate = 1e-5\r\n    }) {\r\n\r\n        {\r\n            this.updateTargetStep = updateTargetStep\r\n\r\n            this.count = 0\r\n\r\n            this.actionsNum = actionsNum\r\n        }\r\n\r\n        {\r\n            this.model = this.buildModel({\r\n                sequenceLen: sequenceLen,\r\n                stateVectorLen: stateVectorLen,\r\n                embInner: embInner,\r\n                layerNum: layerNum,\r\n                outputInner: outputInner,\r\n                actionsNum: actionsNum\r\n            })\r\n            this.model.summary()\r\n\r\n            this.targetModel = this.buildModel({\r\n                sequenceLen: sequenceLen,\r\n                stateVectorLen: stateVectorLen,\r\n                embInner: embInner,\r\n                layerNum: layerNum,\r\n                outputInner: outputInner,\r\n                actionsNum: actionsNum\r\n            })\r\n\r\n            this.targetModel.setWeights(this.model.getWeights())\r\n        }\r\n\r\n        {\r\n            this.memorySize = memorySize\r\n            this.memory = []\r\n        }\r\n\r\n        {\r\n            this.minLearningRate = minLearningRate\r\n            this.optimizer = tf.train.adam(1e-3)\r\n        }\r\n\r\n    }\r\n\r\n    buildModel(\r\n        {\r\n            sequenceLen,\r\n            stateVectorLen,\r\n            layerNum = 32,\r\n            actionsNum = [3, 3, 4]\r\n        }\r\n    ) {\r\n        let stateSeqNet = (inputLayer, stateVectorLen, sequenceLen) => {\r\n            stateSeqLayer = tf.layers.conv1d({\r\n                filters: stateVectorLen,\r\n                kernelSize: [1],\r\n                activation: \"selu\",\r\n                padding: \"same\"\r\n            }).apply(inputLayer)\r\n            stateSeqLayer = tf.layers.batchNormalization({}).apply(stateSeqLayer)\r\n\r\n            stateSeqLayer = tf.layers.permute({\r\n                dims: [2, 1]\r\n            }).apply(stateSeqLayer)\r\n\r\n            stateSeqLayer = tf.layers.conv1d({\r\n                filters: sequenceLen,\r\n                kernelSize: [1],\r\n                activation: \"selu\",\r\n                padding: \"same\"\r\n            }).apply(stateSeqLayer)\r\n            stateSeqLayer = tf.layers.batchNormalization({}).apply(stateSeqLayer)\r\n\r\n            stateSeqLayer = tf.layers.permute({\r\n                dims: [2, 1]\r\n            }).apply(stateSeqLayer)\r\n\r\n            return stateSeqLayer\r\n        }\r\n        let input = tf.input({ shape: [sequenceLen, stateVectorLen] })\r\n\r\n        let stateSeqLayer = input\r\n\r\n        for (let i = 0; i < layerNum; i++) {\r\n            stateSeqLayer = stateSeqNet(stateSeqLayer, stateVectorLen + actionsNum.reduce((a, b) => a + b, 0), sequenceLen)\r\n        }\r\n\r\n        let outputs = actionsNum.map(actionNum => {\r\n            let value = stateSeqLayer\r\n            {\r\n                value = stateSeqNet(value, stateVectorLen + actionNum, sequenceLen)\r\n                value = stateSeqNet(value, stateVectorLen + actionNum, sequenceLen)\r\n\r\n                //用Global Average Pooling代替Fully Connected\r\n                value = tf.layers.globalAveragePooling1d({}).apply(value)\r\n                value = tf.layers.reshape({ targetShape: [1, stateVectorLen + actionNum] }).apply(value)\r\n\r\n                value = tf.layers.conv1d({\r\n                    filters: 1,\r\n                    kernelSize: [1],\r\n                    activation: \"selu\",\r\n                    padding: \"same\"\r\n                }).apply(value)\r\n                value = tf.layers.flatten().apply(value)\r\n            }\r\n\r\n            let A = stateSeqLayer\r\n            {\r\n                A = stateSeqNet(A, stateVectorLen + actionNum, sequenceLen)\r\n                A = stateSeqNet(A, stateVectorLen + actionNum, sequenceLen)\r\n\r\n                //用Global Average Pooling代替Fully Connected\r\n                A = tf.layers.globalAveragePooling1d({}).apply(A)\r\n                A = tf.layers.reshape({ targetShape: [1, stateVectorLen + actionNum] }).apply(A)\r\n\r\n                A = tf.layers.conv1d({\r\n                    filters: actionNum,\r\n                    kernelSize: [1],\r\n                    activation: \"selu\",\r\n                    padding: \"same\"\r\n                }).apply(A)\r\n                A = tf.layers.flatten().apply(A)\r\n\r\n                A = tfex.layers.lambda({\r\n                    func: (x) => {\r\n                        return tf.sub(x, tf.mean(x, 1, true))\r\n                    }\r\n                }).apply([A])\r\n            }\r\n\r\n            let Q = tf.layers.add().apply([value, A])\r\n\r\n            return Q\r\n        })\r\n\r\n        return tf.model({ inputs: [input], outputs: outputs })\r\n    }\r\n\r\n    tQandQ(batchPrevS, batchAs, batchRs, batchNextS) {\r\n        return tf.tidy(() => {\r\n            let predictions = this.model.predict(batchPrevS)\r\n            const Qs = this.actionsNum.map((actionNum, actionType) => {\r\n                return tf.mul(\r\n                    tf.oneHot(\r\n                        batchAs[actionType],\r\n                        actionNum\r\n                    ),\r\n                    predictions[actionType]\r\n                ).sum(1)\r\n            })\r\n\r\n            let targetPredictions = this.targetModel.predict(batchNextS)\r\n            const targetQs = this.actionsNum.map((actionNum, actionType) => {\r\n                const maxQ = tf.mul(\r\n                    tf.oneHot(\r\n                        tf.argMax(\r\n                            predictions[actionType],\r\n                            1\r\n                        ),\r\n                        actionNum\r\n                    ),\r\n                    targetPredictions[actionType]\r\n                ).sum(1)\r\n                const targets = batchRs[actionType].add(maxQ.mul(tf.scalar(0.99)));\r\n                return targets;\r\n            })\r\n            return [targetQs, Qs]\r\n        })\r\n    }\r\n\r\n    train(replayNum = 100, loadIdxes = [null], usePrioritizedReplay = false) {\r\n        tf.tidy(() => {\r\n            let train_ = (replayIdxes) => {\r\n                tf.tidy(() => {\r\n                    let replayIdxes_ = replayIdxes.slice()\r\n\r\n                    let arrayPrevS = []\r\n                    let arrayAs = new Array(this.actionsNum.length).fill([])\r\n                    let arrayRs = new Array(this.actionsNum.length).fill([])\r\n                    let arrayNextS = []\r\n\r\n                    for (let i = 0; i < replayNum; i++) {\r\n                        if (replayIdxes_[i] == null || replayIdxes_[i] >= this.memory.length) {\r\n                            replayIdxes_[i] = Math.floor(Math.random() * this.memory.length);\r\n                        }\r\n                        let data = this.memory[replayIdxes_[i]]\r\n                        // console.log(data)\r\n                        arrayPrevS.push(data.prevS)\r\n                        for (let j = 0; j < this.actionsNum.length; j++) {\r\n                            arrayAs[j][i] = data.As[j]\r\n                            arrayRs[j][i] = data.Rs[j]\r\n                        }\r\n                        arrayNextS.push(data.nextS)\r\n                    }\r\n\r\n                    let batchPrevS = tf.tensor3d(arrayPrevS)\r\n                    let batchAs = arrayAs.map((arrayA) => {\r\n                        return tf.tensor1d(arrayA, 'int32')\r\n                    })\r\n                    let batchRs = arrayRs.map((arrayR) => {\r\n                        return tf.tensor1d(arrayR, 'int32')\r\n                    })\r\n                    let batchNextS = tf.tensor3d(arrayNextS)\r\n\r\n                    let grads = this.optimizer.computeGradients(\r\n                        () => {\r\n                            let [targetQs, Qs] = this.tQandQ(\r\n                                batchPrevS,\r\n                                batchAs,\r\n                                batchRs,\r\n                                batchNextS\r\n                            )\r\n                            tf.addN(\r\n                                this.actionsNum.map((actionNum, actionType) => {\r\n                                    return tf.abs(tf.sub(targetQs[actionType], Qs[actionType]))\r\n                                })\r\n                            ).arraySync()\r\n                                .forEach((absTD, idx) => {\r\n                                    this.memory[replayIdxes_[idx]].p = absTD\r\n                                })\r\n                            let loss = tf.mean(\r\n                                tf.stack(\r\n                                    this.actionsNum.map((actionNum, actionType) => {\r\n                                        return tf.losses.huberLoss(targetQs[actionType], Qs[actionType])\r\n                                    })\r\n                                )\r\n                            )\r\n                            loss.print()\r\n                            return loss\r\n                        }, this.model.getWeights(true)).grads\r\n\r\n                    let gradsName = Object.keys(grads)\r\n                    grads = tfex.funcs.clipByGlobalNorm(Object.values(grads), 0.05)[0]\r\n\r\n                    this.optimizer.applyGradients(gradsName.reduce((acc, gn, idx) => {\r\n                        acc[gn] = grads[idx]\r\n                        // if (gn == \"weighted_average_WeightedAverage1/w\") {\r\n                        //     acc[gn].print()\r\n                        // }\r\n                        return acc\r\n                    }, {}))\r\n\r\n                    this.count++\r\n\r\n                    this.optimizer.learningRate = (1e-4 / this.count ** 0.5) + this.minLearningRate\r\n\r\n                    this.targetModel.setWeights(\r\n                        this.targetModel.getWeights().map((weight, idx) => {\r\n                            return tf.add(\r\n                                tf.mul(this.model.getWeights()[idx], this.updateTargetStep),\r\n                                tf.mul(weight, 1 - this.updateTargetStep),\r\n                            )\r\n                        })\r\n                    )\r\n                })\r\n            }\r\n            if (this.memory.length != 0) {\r\n                if (usePrioritizedReplay) {\r\n                    let prioritizedReplayBuffer = tf.tidy(() => {\r\n                        let prioritys = tf.tensor(this.memory.map(mem => mem.p))\r\n                        prioritys = tf.softmax(prioritys)\r\n                        // prioritys.print()\r\n                        return tf.multinomial(prioritys, replayNum, null, true).arraySync()\r\n                    })\r\n                    // console.log(prioritizedReplayBuffer)\r\n                    train_(prioritizedReplayBuffer.map((prioritizedReplayIdx, idx) => {\r\n                        return loadIdxes[idx] == null || loadIdxes[idx] == undefined ? prioritizedReplayIdx : loadIdxes[idx]\r\n                    }))\r\n                } else {\r\n                    train_(loadIdxes)\r\n                }\r\n            }\r\n        })\r\n    }\r\n\r\n    store(preState, actions, rewards, nextState) {\r\n        if (this.memory.length == this.memorySize) {\r\n            this.memory.pop()\r\n        }\r\n        this.memory.unshift({\r\n            prevS: preState,\r\n            As: actions,\r\n            Rs: rewards,\r\n            nextS: nextState,\r\n            p: 1e+9\r\n        })\r\n    }\r\n\r\n    load(index) {\r\n        if (index == null || index >= this.memory.length) {\r\n            index = Math.floor(Math.random() * this.memory.length);\r\n        }\r\n        return this.memory[index]\r\n    }\r\n\r\n}\r\n\r\nexport function dddqn({\r\n    sequenceLen = 60,\r\n    stateVectorLen = 10,\r\n    embInner = [32, 32, 32],\r\n    layerNum = 8,\r\n    outputInner = [32, 32],\r\n    actionsNum = [3, 3, 4],\r\n    memorySize = 1000,\r\n    updateTargetStep = 0.05,\r\n    minLearningRate = 1e-3\r\n}) {\r\n    return new DDDQN({\r\n        sequenceLen,\r\n        stateVectorLen,\r\n        embInner,\r\n        layerNum,\r\n        outputInner,\r\n        actionsNum,\r\n        memorySize,\r\n        updateTargetStep,\r\n        minLearningRate\r\n    })\r\n}","export * from './model'","import * as tf from \"@tensorflow/tfjs\"\r\nimport { dddqn } from \"../../src/js/MirageNet/dddqn\"\r\nimport { registerTfex } from \"../../src/lib/tfjs-extensions/src\"\r\nconst tfex = registerTfex(tf)\r\n\r\ntf.setBackend(\"webgl\")\r\n\r\nlet actionsNum = [3, 3, 4]\r\n\r\nlet dddqnModel = dddqn({\r\n    sequenceLen: 16,\r\n    stateVectorLen: 55,\r\n    layerNum: 16,\r\n    actionsNum: actionsNum,\r\n    memorySize: 3200,\r\n    minLearningRate: 5e-4,\r\n    updateTargetStep: 0.1\r\n})\r\n\r\nlet preArchive = {\r\n    \"player1\": {\r\n        state: null,\r\n        actions: null,\r\n        expired: true\r\n    },\r\n    \"player2\": {\r\n        state: null,\r\n        actions: null,\r\n        expired: true\r\n    }\r\n}\r\n\r\ntf.ready().then(() => {\r\n    let channel = self\r\n    channel.addEventListener(\"message\", (e) => {\r\n        tf.tidy(() => {\r\n            switch (e.data.instruction) {\r\n                case 'init': {\r\n                    channel.postMessage({ instruction: \"init\" })\r\n                    break\r\n                }\r\n                case 'ctrl': {\r\n                    if (Object.keys(e.data.args.archive).length != 0) {\r\n                        let outputActions = dddqnModel\r\n                            .model\r\n                            .predict(\r\n                                tf.tensor(\r\n                                    Object.values(e.data.args.archive)\r\n                                        .map(archive => {\r\n                                            return archive.state\r\n                                        })\r\n                                )\r\n                            )\r\n                        outputActions = outputActions.map(outputAction => {\r\n                            outputAction = tf.softmax(outputAction, 1)\r\n                            outputAction = tf.div(\r\n                                tf.add(\r\n                                    outputAction,\r\n                                    1 / outputAction.shape[1]\r\n                                ),\r\n                                2\r\n                            )\r\n                            // outputAction.sum(1).print()\r\n                            // outputAction.print()\r\n                            return outputAction\r\n                        })\r\n\r\n                        let actions = []\r\n                        let chooseByArgMax = outputActions.map(outputAction => {\r\n                            return outputAction\r\n                                .argMax(1)\r\n                                .reshape([-1])\r\n                                .arraySync()\r\n                        })\r\n\r\n                        let chooseByMultinomial = outputActions.map(outputAction => {\r\n                            return tf.multinomial(outputAction, 1, null, true)\r\n                                .reshape([-1])\r\n                                .arraySync()\r\n                        })\r\n                        e.data.args.chooseActionRandomValue.forEach((chooseActionRandomValue, idx) => {\r\n                            if (Math.random() < chooseActionRandomValue) {\r\n                                actions[idx] = actionsNum.map((value, actionType) => {\r\n                                    return chooseByMultinomial[actionType][idx]\r\n                                })\r\n                            } else {\r\n                                actions[idx] = actionsNum.map((value, actionType) => {\r\n                                    return chooseByArgMax[actionType][idx]\r\n                                })\r\n                            }\r\n                        })\r\n\r\n                        Object.keys(preArchive).forEach((playerName) => {\r\n                            if (Object.keys(e.data.args.archive).find(name => name === playerName) !== undefined) {\r\n                                if (preArchive[playerName].expired == false) {\r\n                                    dddqnModel.store(\r\n                                        preArchive[playerName].state,\r\n                                        preArchive[playerName].actions,\r\n                                        e.data.args.archive[playerName].rewards,\r\n                                        e.data.args.archive[playerName].state,\r\n                                    )\r\n                                }\r\n                                preArchive[playerName].expired = false\r\n                            } else {\r\n                                preArchive[playerName].expired = true\r\n                            }\r\n                        })\r\n\r\n                        Object.keys(e.data.args.archive).forEach((playerName, idx) => {\r\n                            preArchive[playerName].state = e.data.args.archive[playerName].state\r\n                            preArchive[playerName].actions = actions[idx]\r\n                        })\r\n                        channel.postMessage({\r\n                            instruction: \"ctrl\",\r\n                            args: {\r\n                                archive: Object.keys(e.data.args.archive).reduce((acc, name, idx) => {\r\n                                    acc[name] = {\r\n                                        actions: actions[idx]\r\n                                    }\r\n                                    return acc\r\n                                }, {})\r\n                            }\r\n                        })\r\n                    } else {\r\n                        channel.postMessage({\r\n                            instruction: \"ctrl\",\r\n                            args: {\r\n                                archive: {}\r\n                            }\r\n                        })\r\n                    }\r\n                    // console.log(\"ctrl\")\r\n                    break\r\n                }\r\n                case 'train': {\r\n                    dddqnModel.train(e.data.args.bsz, e.data.args.replayIdxes, e.data.args.usePrioritizedReplay)\r\n                    channel.postMessage({ instruction: \"train\" })\r\n                    break\r\n                }\r\n                case 'save': {\r\n                    tf.tidy(() => {\r\n                        let Ws = dddqnModel.model.getWeights()\r\n                        let tList = Ws.reduce((acc, w) => {\r\n                            acc[w.name] = w\r\n                            return acc\r\n                        }, {})\r\n                        channel.postMessage({\r\n                            instruction: \"save\",\r\n                            args: {\r\n                                weightsBuffer: tfex.sl.save(tList)\r\n                            }\r\n                        })\r\n                    })\r\n\r\n                    break\r\n                }\r\n                case 'load': {\r\n                    let loadWeights = tfex.sl.load(e.data.args.weightsBuffer)\r\n                    dddqnModel.model.getWeights().forEach((w) => {\r\n                        w.assign(loadWeights[w.name])\r\n                    })\r\n                    dddqnModel.targetModel.setWeights(\r\n                        dddqnModel.model.getWeights()\r\n                    )\r\n                    channel.postMessage({ instruction: \"load\" })\r\n                    break\r\n                }\r\n            }\r\n        })\r\n    })\r\n})"]}