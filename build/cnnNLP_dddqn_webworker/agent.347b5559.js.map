{"version":3,"sources":["../src/js/MirageNet/dddqn/model.js","../src/js/MirageNet/dddqn/index.js","js/agent.js"],"names":["tfex","tf","DDDQN","sequenceLen","inputNum","embInner","filters","outputInner","actionNum","memorySize","updateTargetStep","count","model","buildModel2","summary","targetModel","setWeights","getWeights","memory","optimizer","train","adam","input","shape","preASV","embLayer","layers","dense","units","activation","apply","i","length","reshape","targetShape","dropout","rate","cnnLayer","conv2d","kernelSize","padding","Math","floor","strides","flattenLayer","flatten","outputLayer","value","A","mean","lambda","func","x","outputShape","advantage","y","sub","Q","add","ASV","softmax","AAV","div","max","stack","WeightedAverage","args","Layer","inputShape","w","addWeight","initializers","constant","built","inputs","kwargs","invokeCallHook","mul","read","serialization","registerClass","action","outputs","WeightedSequence","axis","script","write","range","funcs","einsum","WSLayer","conv1d","tidy","O_","abs","sum","arrayPrevS","arrayPrevASV","arrayA","arrayR","arrayNextS","arrayNextASV","batchPrevS","tensor3d","batchPrevASV","tensor2d","batchA","tensor1d","batchR","batchNextS","batchNextASV","maxQ","predict","predMask","oneHot","targets","scalar","predictions","expandDims","square","asType","replayNum","idx","data","load","push","minimize","loss","preState","reward","nextState","nextASV","pop","unshift","index","random","dddqn","setBackend","dddqnModel","preArchive","state","fill","expired","ready","then","self","addEventListener","e","instruction","postMessage","Object","keys","archive","ASVsAndActions","tensor","values","map","playerName","argMax","print","actions","arraySync","forEach","undefined","find","name","store","dispose","keep","unstack","reduce","acc","console","log","Ws","tList","weightsBuffer","sl","save","loadWeights","assign"],"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","file":"agent.347b5559.js","sourceRoot":"..\\..\\cnnNLP_dddqn_webworker","sourcesContent":["import * as tf from \"@tensorflow/tfjs\"\r\nimport { registerTfex } from \"../../../lib/tfjs-extensions/src\"\r\nconst tfex = registerTfex(tf)\r\n\r\nexport class DDDQN {\r\n    constructor({\r\n        sequenceLen = 60,\r\n        inputNum = 10,\r\n        embInner = [32, 32, 32],\r\n        filters = [8, 8, 8, 8],\r\n        outputInner = [32, 32],\r\n        actionNum = 8,\r\n        memorySize = 1000,\r\n        updateTargetStep = 20\r\n    }) {\r\n\r\n        {\r\n            this.updateTargetStep = updateTargetStep\r\n\r\n            this.count = 0\r\n\r\n            this.actionNum = actionNum\r\n        }\r\n\r\n        {\r\n            this.model = this.buildModel2({\r\n                sequenceLen: sequenceLen,\r\n                inputNum: inputNum,\r\n                embInner: embInner,\r\n                filters: filters,\r\n                outputInner: outputInner,\r\n                actionNum: actionNum\r\n            })\r\n            this.model.summary()\r\n\r\n            this.targetModel = this.buildModel2({\r\n                sequenceLen: sequenceLen,\r\n                inputNum: inputNum,\r\n                embInner: embInner,\r\n                filters: filters,\r\n                outputInner: outputInner,\r\n                actionNum: actionNum\r\n            })\r\n\r\n            this.targetModel.setWeights(this.model.getWeights())\r\n        }\r\n\r\n        {\r\n            this.memorySize = memorySize\r\n            this.memory = []\r\n        }\r\n\r\n        {\r\n            this.optimizer = tf.train.adam(1e-4)\r\n        }\r\n\r\n    }\r\n\r\n    buildModel(\r\n        {\r\n            sequenceLen,\r\n            inputNum,\r\n            embInner = [64, 64, 64],\r\n            filters = [64, 64, 64],\r\n            outputInner = [64, 64],\r\n            actionNum = 36\r\n        }\r\n    ) {\r\n        let input = tf.input({ shape: [sequenceLen, inputNum] })\r\n        let preASV = tf.input({ shape: [actionNum] })\r\n\r\n        let embLayer = tf.layers.dense({ units: embInner[0], activation: 'selu' }).apply(input)\r\n        for (let i = 1; i < embInner.length; i++) {\r\n            embLayer = tf.layers.dense({ units: embInner[i], activation: 'selu' }).apply(embLayer)\r\n        }\r\n        embLayer = tf.layers.reshape({ targetShape: [sequenceLen, embInner[embInner.length - 1], 1] }).apply(embLayer)\r\n        embLayer = tf.layers.dropout({ rate: 0.1 }).apply(embLayer)\r\n\r\n        let cnnLayer = tf.layers.conv2d({\r\n            filters: filters[0],\r\n            kernelSize: [2, embInner[embInner.length - 1]],\r\n            activation: \"selu\",\r\n            padding: \"same\"\r\n        }).apply(embLayer)\r\n        for (let i = 1; i < filters.length - 1; i++) {\r\n            cnnLayer = tf.layers.conv2d({\r\n                filters: filters[i],\r\n                kernelSize: [i * Math.floor(sequenceLen / filters.length), embInner[embInner.length - 1]],\r\n                activation: \"selu\",\r\n                padding: \"same\"\r\n            }).apply(cnnLayer)\r\n        }\r\n        cnnLayer = tf.layers.conv2d({\r\n            filters: filters[filters.length - 1],\r\n            kernelSize: [sequenceLen, embInner[embInner.length - 1]],\r\n            strides: [sequenceLen, embInner[embInner.length - 1]],\r\n            activation: \"selu\",\r\n            padding: \"same\"\r\n        }).apply(cnnLayer)\r\n\r\n        let flattenLayer = tf.layers.flatten().apply(cnnLayer)\r\n        flattenLayer = tf.layers.dropout({ rate: 0.1 }).apply(flattenLayer)\r\n\r\n        let outputLayer = tf.layers.dense({ units: outputInner[0], activation: 'selu' }).apply(flattenLayer)\r\n        for (let i = 1; i < outputInner.length; i++) {\r\n            outputLayer = tf.layers.dense({ units: outputInner[i], activation: 'selu' }).apply(outputLayer)\r\n        }\r\n        outputLayer = tf.layers.dense({ units: actionNum, activation: 'selu' }).apply(outputLayer)\r\n        outputLayer = tf.layers.dropout({ rate: 0.1 }).apply(outputLayer)\r\n\r\n        let value = tf.layers.dense({\r\n            units: actionNum,\r\n            activation: \"selu\"\r\n        }).apply(outputLayer)\r\n\r\n        let A = tf.layers.dense({\r\n            units: actionNum,\r\n            activation: \"selu\"\r\n        }).apply(outputLayer)\r\n\r\n        let mean = tfex.layers.lambda({\r\n            func: (x) => {\r\n                return tf.mean(x, 1, true)\r\n            },\r\n            outputShape: [1]\r\n        }).apply([A])\r\n\r\n        let advantage = tfex.layers.lambda({\r\n            func: (x, y) => {\r\n                return tf.sub(x, y)\r\n            }\r\n        }).apply([A, mean])\r\n\r\n        let Q = tf.layers.add().apply([value, advantage])\r\n\r\n        //Action Selection Value\r\n        let ASV = tf.layers.softmax().apply(Q)\r\n\r\n        //Action Activation Value\r\n        let AAV = tfex.layers.lambda({\r\n            func: (ASV, preASV) => {\r\n                return tf.div(tf.sub(ASV, preASV), tf.max(tf.stack([ASV, preASV]), 0))\r\n            }\r\n        }).apply([ASV, preASV])\r\n\r\n        // AAV = tf.layers.softmax().apply(AAV)\r\n\r\n        class WeightedAverage extends tf.layers.Layer {\r\n            constructor(args) {\r\n                super({})\r\n            }\r\n            build(inputShape) {\r\n                // console.log(\"LayerNorm build : \")\r\n                this.w = this.addWeight(\"w\", [inputShape[0][inputShape.length - 1]], \"float32\", tf.initializers.constant({ value: 0.5 }))\r\n                this.built = true\r\n            }\r\n            computeOutputShape(inputShape) {\r\n                //console.log(\"LayerNorm computeOutputShape\")\r\n                //console.log(inputShape)\r\n                return inputShape[0]\r\n            }\r\n            call(inputs, kwargs) {\r\n                //console.log(\"LayerNorm call\")\r\n                this.invokeCallHook(inputs, kwargs)\r\n                return tf.add(\r\n                    tf.mul(inputs[0], this.w.read()),\r\n                    tf.mul(inputs[1], tf.sub(1, this.w.read()))\r\n                )\r\n            }\r\n\r\n            /*\r\n            * If a custom layer class is to support serialization, it must implement\r\n            * the `className` static getter.\r\n            */\r\n            static get className() {\r\n                return \"WeightedAverage\"\r\n            }\r\n        }\r\n        // registerClass\r\n        tf.serialization.registerClass(WeightedAverage)\r\n\r\n        let action = new WeightedAverage().apply([ASV, AAV])\r\n        // action = tf.layers.softmax().apply(action)\r\n\r\n        return tf.model({ inputs: [input, preASV], outputs: [ASV, action] })\r\n    }\r\n\r\n    buildModel2(\r\n        {\r\n            sequenceLen,\r\n            inputNum,\r\n            filters = 8,\r\n            actionNum = 36\r\n        }\r\n    ) {\r\n        let input = tf.input({ shape: [sequenceLen, inputNum] })\r\n        let preASV = tf.input({ shape: [actionNum] })\r\n\r\n        class WeightedSequence extends tf.layers.Layer {\r\n            constructor(args = { axis, script }) {\r\n                super({})\r\n                this.axis = args.axis\r\n                this.script = args.script\r\n            }\r\n            build(inputShape) {\r\n                this.w = this.addWeight(\"w\", [inputShape[this.axis]], \"float32\", tf.initializers.constant({ value: 0.5 }))\r\n                this.w.write(tf.range(1, 2, 1 / inputShape[this.axis]))\r\n                this.built = true\r\n            }\r\n            computeOutputShape(inputShape) {\r\n                return inputShape\r\n            }\r\n            call(inputs, kwargs) {\r\n                //console.log(\"LayerNorm call\")\r\n                this.invokeCallHook(inputs, kwargs)\r\n                return tfex.funcs.einsum(this.script, inputs[0], this.w.read())\r\n            }\r\n\r\n            /*\r\n            * If a custom layer class is to support serialization, it must implement\r\n            * the `className` static getter.\r\n            */\r\n            static get className() {\r\n                return \"WeightedSequence\"\r\n            }\r\n        }\r\n        // registerClass\r\n        tf.serialization.registerClass(WeightedSequence)\r\n\r\n        let WSLayer = new WeightedSequence({ axis: 1, script: \"ijk,j->ijk\" }).apply(input)\r\n\r\n        let cnnLayer = tf.layers.conv1d({\r\n            filters: filters * 4,\r\n            kernelSize: [1],\r\n            activation: \"linear\",\r\n            padding: \"same\"\r\n        }).apply(WSLayer)\r\n        cnnLayer = tf.layers.conv1d({\r\n            filters: filters * 4,\r\n            kernelSize: [1],\r\n            activation: \"selu\",\r\n            padding: \"same\"\r\n        }).apply(cnnLayer)\r\n\r\n        while (1 <= cnnLayer.shape[1] / 2) {\r\n            // cnnLayer = tf.layers.conv1d({\r\n            //     filters: filters,\r\n            //     kernelSize: [2],\r\n            //     activation: \"selu\",\r\n            //     padding: \"same\"\r\n            // }).apply(cnnLayer)\r\n            cnnLayer = tf.layers.conv1d({\r\n                filters: filters,\r\n                kernelSize: [2],\r\n                strides: [2],\r\n                activation: \"selu\",\r\n                padding: \"same\"\r\n            }).apply(cnnLayer)\r\n        }\r\n\r\n        cnnLayer = tf.layers.conv1d({\r\n            filters: filters * 4,\r\n            kernelSize: [1],\r\n            activation: \"selu\",\r\n            padding: \"same\"\r\n        }).apply(cnnLayer)\r\n\r\n        cnnLayer = tf.layers.conv1d({\r\n            filters: actionNum,\r\n            kernelSize: [1],\r\n            activation: \"selu\",\r\n            padding: \"same\"\r\n        }).apply(cnnLayer)\r\n\r\n        let flattenLayer = tf.layers.flatten().apply(cnnLayer)\r\n        flattenLayer = tf.layers.dropout({ rate: 0.1 }).apply(flattenLayer)\r\n\r\n        let value = tf.layers.dense({\r\n            units: actionNum,\r\n            activation: \"selu\"\r\n        }).apply(flattenLayer)\r\n\r\n        let A = tf.layers.dense({\r\n            units: actionNum,\r\n            activation: \"selu\"\r\n        }).apply(flattenLayer)\r\n\r\n        let mean = tfex.layers.lambda({\r\n            func: (x) => {\r\n                return tf.mean(x, 1, true)\r\n            },\r\n            outputShape: [1]\r\n        }).apply([A])\r\n\r\n        let advantage = tfex.layers.lambda({\r\n            func: (x, y) => {\r\n                return tf.sub(x, y)\r\n            }\r\n        }).apply([A, mean])\r\n\r\n        let Q = tf.layers.add().apply([value, advantage])\r\n\r\n        //Action Selection Value\r\n        let ASV = tf.layers.softmax().apply(Q)\r\n\r\n        //Action Activation Value\r\n        let AAV = tfex.layers.lambda({\r\n            func: (ASV, preASV) => {\r\n                return tf.tidy(() => {\r\n                    let O_ = tf.div(tf.sub(ASV, preASV), tf.max(tf.stack([ASV, preASV]), 0))\r\n                    // O_.print()\r\n                    O_ = tf.div(O_, O_.abs().sum(1, true))\r\n                    // O_.print()\r\n                    return O_\r\n                })\r\n            }\r\n        }).apply([ASV, preASV])\r\n\r\n        // AAV = tf.layers.softmax().apply(AAV)\r\n\r\n        class WeightedAverage extends tf.layers.Layer {\r\n            constructor(args) {\r\n                super({})\r\n            }\r\n            build(inputShape) {\r\n                // console.log(\"LayerNorm build : \")\r\n                this.w = this.addWeight(\"w\", [inputShape[0][inputShape.length - 1]], \"float32\", tf.initializers.constant({ value: 0.5 }))\r\n                this.built = true\r\n            }\r\n            computeOutputShape(inputShape) {\r\n                //console.log(\"LayerNorm computeOutputShape\")\r\n                //console.log(inputShape)\r\n                return inputShape[0]\r\n            }\r\n            call(inputs, kwargs) {\r\n                //console.log(\"LayerNorm call\")\r\n                this.invokeCallHook(inputs, kwargs)\r\n                return tf.add(\r\n                    tf.mul(inputs[0], this.w.read()),\r\n                    tf.mul(inputs[1], tf.sub(1, this.w.read()))\r\n                )\r\n            }\r\n\r\n            /*\r\n            * If a custom layer class is to support serialization, it must implement\r\n            * the `className` static getter.\r\n            */\r\n            static get className() {\r\n                return \"WeightedAverage\"\r\n            }\r\n        }\r\n        // registerClass\r\n        tf.serialization.registerClass(WeightedAverage)\r\n\r\n        let action = new WeightedAverage().apply([ASV, AAV])\r\n        // action = tf.layers.softmax().apply(action)\r\n\r\n        return tf.model({ inputs: [input, preASV], outputs: [ASV, action] })\r\n    }\r\n\r\n    loss(arrayPrevS, arrayPrevASV, arrayA, arrayR, arrayNextS, arrayNextASV) {\r\n        return tf.tidy(() => {\r\n            // console.log(arrayPrevS)\r\n            let batchPrevS = tf.tensor3d(arrayPrevS)\r\n            let batchPrevASV = tf.tensor2d(arrayPrevASV)\r\n            let batchA = tf.tensor1d(arrayA, 'int32')\r\n            let batchR = tf.tensor1d(arrayR)\r\n            let batchNextS = tf.tensor3d(arrayNextS)\r\n            let batchNextASV = tf.tensor2d(arrayNextASV)\r\n\r\n            const maxQ = this.targetModel.predict([batchNextS, batchNextASV])[1].reshape([arrayPrevS.length, this.actionNum]).max(1)\r\n\r\n            const predMask = tf.oneHot(batchA, this.actionNum);\r\n\r\n            const targets = batchR.add(maxQ.mul(tf.scalar(0.99)));\r\n\r\n            const predictions = this.model.predict([batchPrevS, batchPrevASV])[1];\r\n\r\n            return tf.mul(predictions.sub(targets.expandDims(1)).square(), predMask.asType('float32')).mean();\r\n        })\r\n\r\n    }\r\n\r\n    train(replayNum = 100, idx = [null]) {\r\n        tf.tidy(() => {\r\n            let arrayPrevS = []\r\n            let arrayPrevASV = []\r\n            let arrayA = []\r\n            let arrayR = []\r\n            let arrayNextS = []\r\n            let arrayNextASV = []\r\n\r\n            for (let i = 0; i < replayNum; i++) {\r\n                let data = this.load(idx[i])\r\n                // console.log(data)\r\n                arrayPrevS.push(data[0])\r\n                arrayPrevASV.push(data[1])\r\n                arrayA.push(data[2])\r\n                arrayR.push(data[3])\r\n                arrayNextS.push(data[4])\r\n                arrayNextASV.push(data[5])\r\n            }\r\n\r\n            this.optimizer.minimize(() => {\r\n                let loss = this.loss(arrayPrevS, arrayPrevASV, arrayA, arrayR, arrayNextS, arrayNextASV)\r\n                // loss.print()\r\n                return loss\r\n            }, true, this.model.getWeights());\r\n\r\n            this.count++\r\n\r\n            if (this.count >= this.updateTargetStep) {\r\n\r\n                this.targetModel.setWeights(this.model.getWeights())\r\n                this.count = 0\r\n            }\r\n        })\r\n    }\r\n\r\n    store(preState, preASV, action, reward, nextState, nextASV) {\r\n        if (this.memory.length == this.memorySize) {\r\n            this.memory.pop()\r\n        }\r\n        this.memory.unshift([preState, preASV, action, reward, nextState, nextASV])\r\n    }\r\n\r\n    load(index) {\r\n        if (index == null || index >= this.memory.length) {\r\n            index = Math.floor(Math.random() * this.memory.length);\r\n        }\r\n        return this.memory[index]\r\n    }\r\n\r\n}\r\n\r\nexport function dddqn({\r\n    sequenceLen = 60,\r\n    inputNum = 10,\r\n    embInner = [32, 32, 32],\r\n    filters = [8, 8, 8, 8],\r\n    outputInner = [32, 32],\r\n    actionNum = 8,\r\n    memorySize = 1000,\r\n    updateTargetStep = 20\r\n}) {\r\n    return new DDDQN({\r\n        sequenceLen,\r\n        inputNum,\r\n        embInner,\r\n        filters,\r\n        outputInner,\r\n        actionNum,\r\n        memorySize,\r\n        updateTargetStep\r\n    })\r\n}","export * from './model'","import * as tf from \"@tensorflow/tfjs\"\r\nimport { dddqn } from \"../../src/js/MirageNet/dddqn\"\r\nimport { registerTfex } from \"../../src/lib/tfjs-extensions/src\"\r\nconst tfex = registerTfex(tf)\r\n\r\ntf.setBackend(\"webgl\")\r\nlet dddqnModel = dddqn({\r\n    sequenceLen: 1024,\r\n    inputNum: 18,\r\n    // embInner: [32, 32, 32],\r\n    // filters: [8, 8, 8, 8, 8, 8, 8, 8, 64],\r\n    filters: 32,\r\n    // outputInner: [32, 32],\r\n    actionNum: 8,\r\n    memorySize: 10000\r\n})\r\n\r\nlet preArchive = {\r\n    \"player1\": {\r\n        state: null,\r\n        ASV: tf.fill([8], 1e-5, \"float32\"),\r\n        preASV: tf.fill([8], 1e-5, \"float32\"),\r\n        action: null,\r\n        expired: true\r\n    },\r\n    \"player2\": {\r\n        state: null,\r\n        ASV: tf.fill([8], 1e-5, \"float32\"),\r\n        preASV: tf.fill([8], 1e-5, \"float32\"),\r\n        action: null,\r\n        expired: true\r\n    }\r\n}\r\n\r\ntf.ready().then(() => {\r\n    self.addEventListener('message', (e) => {\r\n        tf.tidy(() => {\r\n            switch (e.data.instruction) {\r\n                case 'init': {\r\n                    self.postMessage({ instruction: \"init\" })\r\n                    break\r\n                }\r\n                case 'ctrl': {\r\n                    if (Object.keys(e.data.args.archive).length != 0) {\r\n                        let ASVsAndActions = dddqnModel\r\n                            .model\r\n                            .predict([\r\n                                tf.tensor(\r\n                                    Object.values(e.data.args.archive)\r\n                                        .map(archive => {\r\n                                            return archive.state\r\n                                        })\r\n                                ),\r\n                                tf.stack(\r\n                                    Object.keys(e.data.args.archive)\r\n                                        .map(playerName => {\r\n                                            return preArchive[playerName].ASV\r\n                                        })\r\n                                )\r\n                            ])\r\n                        ASVsAndActions[1].argMax(1).print()\r\n\r\n                        let actions = ASVsAndActions[1].argMax(1)\r\n                            // selectAction(outputs)\r\n                            .reshape([-1])\r\n                            .arraySync()\r\n\r\n                        Object.keys(preArchive).forEach((playerName) => {\r\n                            if (Object.keys(e.data.args.archive).find(name => name === playerName) !== undefined) {\r\n                                if (preArchive[playerName].expired == false) {\r\n                                    dddqnModel.store(\r\n                                        preArchive[playerName].state,\r\n                                        preArchive[playerName].preASV.arraySync(),\r\n                                        preArchive[playerName].action,\r\n                                        e.data.args.archive[playerName].reward,\r\n                                        e.data.args.archive[playerName].state,\r\n                                        preArchive[playerName].ASV.arraySync()\r\n                                    )\r\n                                }\r\n                                preArchive[playerName].expired = false\r\n                            } else {\r\n                                preArchive[playerName].expired = true\r\n                            }\r\n                        })\r\n\r\n                        Object.keys(e.data.args.archive).forEach((playerName, idx) => {\r\n                            preArchive[playerName].state = e.data.args.archive[playerName].state\r\n                            tf.dispose(preArchive[playerName].preASV)\r\n                            preArchive[playerName].preASV = tf.keep(preArchive[playerName].ASV)\r\n                            preArchive[playerName].ASV = tf.keep(tf.unstack(ASVsAndActions[0])[idx])\r\n                            preArchive[playerName].action = actions[idx]\r\n                        })\r\n                        self.postMessage({\r\n                            instruction: \"ctrl\",\r\n                            args: {\r\n                                archive: Object.keys(e.data.args.archive).reduce((acc, name, idx) => {\r\n                                    acc[name] = {\r\n                                        action: actions[idx]\r\n                                    }\r\n                                    return acc\r\n                                }, {})\r\n                            }\r\n                        })\r\n                    }\r\n                    console.log(\"ctrl\")\r\n                    break\r\n                }\r\n                case 'train': {\r\n                    dddqnModel.train(64)\r\n                    self.postMessage({ instruction: \"train\" })\r\n                    break\r\n                }\r\n                case 'save': {\r\n                    tf.tidy(() => {\r\n                        let Ws = dddqnModel.model.getWeights()\r\n                        let tList = Ws.reduce((acc, w) => {\r\n                            acc[w.name] = w\r\n                            return acc\r\n                        }, {})\r\n                        self.postMessage({\r\n                            instruction: \"save\",\r\n                            args: {\r\n                                weightsBuffer: tfex.sl.save(tList)\r\n                            }\r\n                        })\r\n                    })\r\n\r\n                    break\r\n                }\r\n                case 'load': {\r\n                    let loadWeights = tfex.sl.load(e.data.args.weightsBuffer)\r\n                    dddqnModel.model.getWeights().forEach((w) => {\r\n                        w.assign(loadWeights[w.name])\r\n                    })\r\n                    dddqnModel.targetModel.setWeights(\r\n                        dddqnModel.model.getWeights()\r\n                    )\r\n                    self.postMessage({ instruction: \"load\" })\r\n                    break\r\n                }\r\n            }\r\n        })\r\n    })\r\n})"]}